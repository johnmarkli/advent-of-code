package main

import (
	"bufio"
	"fmt"
	"math"
	"os"
	"strconv"
	"strings"
)

/*
This rope bridge creaks as you walk along it. You aren't sure how old it is, or
whether it can even support your weight.

It seems to support the Elves just fine, though. The bridge spans a gorge which
was carved out by the massive river far below you.

You step carefully; as you do, the ropes stretch and twist. You decide to
distract yourself by modeling rope physics; maybe you can even figure out where
not to step.

Consider a rope with a knot at each end; these knots mark the head and the tail
of the rope. If the head moves far enough away from the tail, the tail is
pulled toward the head.

Due to nebulous reasoning involving Planck lengths, you should be able to model
the positions of the knots on a two-dimensional grid. Then, by following a
hypothetical series of motions (your puzzle input) for the head, you can
determine how the tail will move.

Due to the aforementioned Planck lengths, the rope must be quite short; in
fact, the head (H) and tail (T) must always be touching (diagonally adjacent
and even overlapping both count as touching):

....
.TH.
....

....
.H..
..T.
....

...
.H. (H covers T)
...

If the head is ever two steps directly up, down, left, or right from the tail,
the tail must also move one step in that direction so it remains close enough:

.....    .....    .....
.TH.. -> .T.H. -> ..TH.
.....    .....    .....

...    ...    ...
.T.    .T.    ...
.H. -> ... -> .T.
...    .H.    .H.
...    ...    ...

Otherwise, if the head and tail aren't touching and aren't in the same row or
column, the tail always moves one step diagonally to keep up:

.....    .....    .....
.....    ..H..    ..H..
..H.. -> ..... -> ..T..
.T...    .T...    .....
.....    .....    .....

.....    .....    .....
.....    .....    .....
..H.. -> ...H. -> ..TH.
.T...    .T...    .....
.....    .....    .....

You just need to work out where the tail goes as the head follows a series of
motions. Assume the head and the tail both start at the same position,
overlapping.

For example:

R 4
U 4
L 3
D 1
R 4
D 1
L 5
R 2

This series of motions moves the head right four steps, then up four steps,
then left three steps, then down one step, and so on. After each step, you'll
need to update the position of the tail if the step means the head is no longer
adjacent to the tail. Visually, these motions occur as follows (s marks the
starting position as a reference point):

== Initial State ==

......
......
......
......
H.....  (H covers T, s)

== R 4 ==

......
......
......
......
TH....  (T covers s)

......
......
......
......
sTH...

......
......
......
......
s.TH..

......
......
......
......
s..TH.

== U 4 ==

......4
......3
......2
....H.1
s..T..0
01234

......4
......3
....H.2
....T.1
s.....0
01234

......
....H.
....T.
......
s.....

....H.
....T.
......
......
s.....

== L 3 ==

...H..
....T.
......
......
s.....

..HT..
......
......
......
s.....

.HT...
......
......
......
s.....

== D 1 ==

..T...
.H....
......
......
s.....

== R 4 ==

..T...
..H...
......
......
s.....

..T...
...H..
......
......
s.....

......
...TH.
......
......
s.....

......
....TH
......
......
s.....

== D 1 ==

......
....T.
.....H
......
s.....

== L 5 ==

......
....T.
....H.
......
s.....

......
....T.
...H..
......
s.....

......
......
..HT..
......
s.....

......
......
.HT...
......
s.....

......
......
HT....
......
s.....

== R 2 ==

......
......
.H....  (H covers T)
......
s.....

......
......
.TH...
......
s.....

After simulating the rope, you can count up all of the positions the tail
visited at least once. In this diagram, s again marks the starting position
(which the tail also visited) and # marks other positions the tail visited:

..##..
...##.
.####.
....#.
s###..

So, there are 13 positions the tail visited at least once.

Simulate your complete hypothetical series of motions. How many positions does
the tail of the rope visit at least once?
*/
type pos struct {
	x int
	y int
}

func (p *pos) moveNext(head *pos) {
	// T must move to be adjacent to H
	// no need to move if diff between axes is <= 1
	if int(math.Abs(float64(head.x-p.x))) > 1 || int(math.Abs(float64(head.y-p.y))) > 1 {

		// if not on same axis, if only 1 away, then move in that direction
		if p.x != head.x && p.y != head.y {
			if head.x-p.x == 1 {
				p.x++
			} else if p.x-head.x == 1 {
				p.x--
			} else if head.y-p.y == 1 {
				p.y++
			} else if p.y-head.y == 1 {
				p.y--
			}
		}

		// always move whenenver an axis diff is > 1
		// if on same x axis OR on same y axis
		// if p.x == head.x || p.y == head.y {
		// on x axis if abs(H.x - T.x) > 1 move T.x towards H.x
		// on y axis if abs(H.y - T.y) > 1 move T.y towards H.y
		if head.x-p.x > 1 {
			p.x++
		}
		if p.x-head.x > 1 {
			p.x--
		}
		if head.y-p.y > 1 {
			p.y++
		}
		if p.y-head.y > 1 {
			p.y--
		}
	}
}

// Day9Part1 ...
func Day9Part1(filepath string) any {
	var res int

	// keep track of coordinates, but don't actually represent it in a 2D array
	// could have a map of coordinates x, y to show visited
	// every time the tail visits a coord, check if in map, if not add to map and increment count

	// init head and tail position to 0, 0
	head := &pos{0, 0}
	tail := &pos{0, 0}
	visited := map[string]bool{
		"0,0": true,
	}

	// read file
	readFile, _ := os.Open(filepath)

	// read line
	fileScanner := bufio.NewScanner(readFile)
	fileScanner.Split(bufio.ScanLines)

	// for each line
	for fileScanner.Scan() {
		line := fileScanner.Text()

		// move head according to line
		// head.moveHead(line, tail)
		split := strings.Split(line, " ")
		dir, steps := split[0], split[1]
		n, _ := strconv.Atoi(steps)
		for i := 1; i <= n; i++ {
			switch dir {
			case "U":
				head.y++
			case "D":
				head.y--
			case "L":
				head.x--
			case "R":
				head.x++
			}
			// move tail according to head
			tail.moveNext(head)

			// check tail position in visited map
			// if not found, add to map and increment count
			tailCoord := fmt.Sprintf("%d,%d", tail.x, tail.y)
			if _, ok := visited[tailCoord]; !ok {
				visited[tailCoord] = true
			}
		}
		res = len(visited)
	}

	return res
}

/*
A rope snaps! Suddenly, the river is getting a lot closer than you remember.
The bridge is still there, but some of the ropes that broke are now whipping
toward you as you fall through the air!

The ropes are moving too quickly to grab; you only have a few seconds to choose
how to arch your body to avoid being hit. Fortunately, your simulation can be
extended to support longer ropes.

Rather than two knots, you now must simulate a rope consisting of ten knots.
One knot is still the head of the rope and moves according to the series of
motions. Each knot further down the rope follows the knot in front of it using
the same rules as before.

Using the same series of motions as the above example, but with the knots
marked H, 1, 2, ..., 9, the motions now occur as follows:

== Initial State ==

......
......
......
......
H.....  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)

== R 4 ==

......
......
......
......
1H....  (1 covers 2, 3, 4, 5, 6, 7, 8, 9, s)

......
......
......
......
21H...  (2 covers 3, 4, 5, 6, 7, 8, 9, s)

......
......
......
......
321H..  (3 covers 4, 5, 6, 7, 8, 9, s)

......
......
......
......
4321H.  (4 covers 5, 6, 7, 8, 9, s)

== U 4 ==

......
......
......
....H.
4321..  (4 covers 5, 6, 7, 8, 9, s)

......
......
....H.
.4321.
5.....  (5 covers 6, 7, 8, 9, s)

......
....H.
....1.
.432..
5.....  (5 covers 6, 7, 8, 9, s)

....H.
....1.
..432.
.5....
6.....  (6 covers 7, 8, 9, s)

== L 3 ==

...H..
....1.
..432.
.5....
6.....  (6 covers 7, 8, 9, s)

..H1..
...2..
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

.H1...
...2..
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

== D 1 ==

..1...
.H.2..
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

== R 4 ==

..1...
..H2..
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

..1...
...H..  (H covers 2)
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

......
...1H.  (1 covers 2)
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

......
...21H
..43..
.5....
6.....  (6 covers 7, 8, 9, s)

== D 1 ==

......
...21.
..43.H
.5....
6.....  (6 covers 7, 8, 9, s)

== L 5 ==

......
...21.
..43H.
.5....
6.....  (6 covers 7, 8, 9, s)

......
...21.
..4H..  (H covers 3)
.5....
6.....  (6 covers 7, 8, 9, s)

......
...2..
..H1..  (H covers 4; 1 covers 3)
.5....
6.....  (6 covers 7, 8, 9, s)

......
...2..
.H13..  (1 covers 4)
.5....
6.....  (6 covers 7, 8, 9, s)

......
......
H123..  (2 covers 4)
.5....
6.....  (6 covers 7, 8, 9, s)

== R 2 ==

......
......
.H23..  (H covers 1; 2 covers 4)
.5....
6.....  (6 covers 7, 8, 9, s)

......
......
.1H3..  (H covers 2, 4)
.5....
6.....  (6 covers 7, 8, 9, s)

Now, you need to keep track of the positions the new tail, 9, visits. In this
example, the tail never moves, and so it only visits 1 position. However, be
careful: more types of motion are possible than before, so you might want to
visually compare your simulated rope to the one above.

Here's a larger example:

R 5
U 8
L 8
D 3
R 17
D 10
L 25
U 20

These motions occur as follows (individual steps are not shown):

== Initial State ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
...........H..............  (H covers 1, 2, 3, 4, 5, 6, 7, 8, 9, s)
..........................
..........................
..........................
..........................
..........................

== R 5 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
...........54321H.........  (5 covers 6, 7, 8, 9, s)
..........................
..........................
..........................
..........................
..........................

== U 8 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
................H.........
................1.........
................2.........
................3.........
...............54.........
..............6...........
.............7............
............8.............
...........9..............  (9 covers s)
..........................
..........................
..........................
..........................
..........................

== L 8 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
........H1234.............
............5.............
............6.............
............7.............
............8.............
............9.............
..........................
..........................
...........s..............
..........................
..........................
..........................
..........................
..........................

== D 3 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
.........2345.............
........1...6.............
........H...7.............
............8.............
............9.............
..........................
..........................
...........s..............
..........................
..........................
..........................
..........................
..........................

== R 17 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
................987654321H
..........................
..........................
..........................
..........................
...........s..............
..........................
..........................
..........................
..........................
..........................

== D 10 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
...........s.........98765
.........................4
.........................3
.........................2
.........................1
.........................H

== L 25 ==

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
...........s..............
..........................
..........................
..........................
..........................
H123456789................

== U 20 ==

H.........................
1.........................
2.........................
3.........................
4.........................
5.........................
6.........................
7.........................
8.........................
9.........................
..........................
..........................
..........................
..........................
..........................
...........s..............
..........................
..........................
..........................
..........................
..........................

Now, the tail (9) visits 36 positions (including s) at least once:

..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
..........................
#.........................
#.............###.........
#............#...#........
.#..........#.....#.......
..#..........#.....#......
...#........#.......#.....
....#......s.........#....
.....#..............#.....
......#............#......
.......#..........#.......
........#........#........
.........########.........

Simulate your complete series of motions on a larger rope with ten knots. How
many positions does the tail of the rope visit at least once?
*/

// Day9Part2 ...
func Day9Part2(filepath string) any {
	var res int

	// keep array of knots of size 10
	// at each iteration,
	// move head, then loop through knots and run moveNext on it
	// for last knot, check visited

	// init head and tail position to 0, 0
	knots := make([]*pos, 10)
	for i := range knots {
		knots[i] = &pos{0, 0}
	}

	visited := map[string]bool{
		"0,0": true,
	}

	// read file
	readFile, _ := os.Open(filepath)

	// read line
	fileScanner := bufio.NewScanner(readFile)
	fileScanner.Split(bufio.ScanLines)

	// for each line
	for fileScanner.Scan() {
		line := fileScanner.Text()

		// move head according to line
		split := strings.Split(line, " ")
		dir, steps := split[0], split[1]
		// fmt.Println("===", dir, steps, "===")
		n, _ := strconv.Atoi(steps)
		head := knots[0]
		for i := 1; i <= n; i++ {
			switch dir {
			case "U":
				head.y++
			case "D":
				head.y--
			case "L":
				head.x--
			case "R":
				head.x++
			}

			// move next  according to new head
			for i := 1; i < len(knots); i++ {
				cur := knots[i]
				prev := knots[i-1]
				cur.moveNext(prev)

				// check tail position in visited map
				if i == len(knots)-1 {
					// if not found, add to map and increment count
					tailCoord := fmt.Sprintf("%d,%d", cur.x, cur.y)
					if _, ok := visited[tailCoord]; !ok {
						visited[tailCoord] = true
						// fmt.Println("added", tailCoord)
					}
				}
			} // end update knots
			// printKnots(knots)
		} // end single move
	} // end set of moves in a line
	res = len(visited)

	return res
}

/*
how to plot x,y to 2D array
0,0 = maxx -minx / 2 , maxy-miny / 2
minx,maxy.....maxx,maxy
......................
minx,miny.....max,xminy
*/
func printKnots(knots []*pos) {
	// start with 50*50 grid with middle as starting
	boardSize := 40
	board := make([][]string, boardSize)
	for i := range board {
		board[i] = make([]string, boardSize)
		for j := range board[i] {
			board[i][j] = "."
		}
	}

	startx := len(board) / 2
	starty := len(board[0]) / 2
	board[startx][starty] = "s"

	for i, knot := range knots {
		x, y := startx-knot.y, starty+knot.x
		if i == 0 {
			board[x][y] = "H"
		} else if board[x][y] == "." || board[x][y] == "s" {
			board[x][y] = strconv.Itoa(i)
		}
	}

	if board[startx][starty] == "." {
		board[startx][starty] = "s"
	}

	for i := range board {
		row := ""
		for j := range board[i] {
			row += board[i][j]
		}
		fmt.Println(row)
	}
}
